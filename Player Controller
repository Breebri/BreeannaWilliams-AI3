using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerController : MonoBehaviour
{
    private CharacterInput controls; // Our controls we defined
    private Vector3 velocity; // To hold our current velocity
    private Vector2 move; // To hold our move


    private CharacterController controller; // Character controller

    public float moveSpeed = 6f; // To calibrate our movement
    public float jumpHeight = 2.4f; // To calibrate our jump
    public float gravity = -9.81f; // To calibrate our gravity
    public float crouchHeight = 1.4f;

    public Transform ground; // Ground check empty goes in here
    public float distanceToGround = 0.4f; // How close the ground needs to be to register
    public LayerMask groundMask; // What layer is ground?

    private Vector3 prevposition;
    public AudioSource walk;
    public float minMoveDistance = 0.1f;

    void Awake()
    {
        controls = new CharacterInput();
        controller = GetComponent<CharacterController>();
    }

    void Start()
    {
        prevposition = transform.position;
    }

    void Update()
    {
        PlayerMovement();
        Grav();
        Jump();
        Crouch();
        Shield();
        Throw();

        float MoveDistance = Vector3.Distance(transform.position, prevposition);
        print(Mathf.Round(MoveDistance*20)/10);

        float movedis = Mathf.Round(MoveDistance * 20) / 10;
        while (movedis > 0)
        {
            walk.Play();
            prevposition = transform.position;
        }
        
    }

    public float throwAmount;
    public Camera fpsCam;
    public GameObject bomb;


    public Transform Player;

    

    private void Throw()
    {

        if(controls.Player.Throw.triggered)
        {
            
        }
    }

    

    bool NotCrouch = true;
    private void Crouch()
    {
        
        CharacterController controller;
        controller = GetComponent<CharacterController>();
        Debug.Log(NotCrouch);
        //height = 1.4f
        if (controls.Player.Crouch.IsPressed() && NotCrouch && isGrounded())
        {
        
                
                controller.height = 1.4f;
            NotCrouch = !NotCrouch;
                
            
            
            
        }
        else if (controls.Player.Crouch.IsPressed() == false && NotCrouch == false)
        {
            controller.height = 2.4f;
            NotCrouch = !NotCrouch;
        }
    }
    

    private void Shield()
    {

    }

    private void Grav()
    {
		if (isGrounded() && velocity.y < 0)
        {
			velocity.y = -2f;
		}
		
		velocity.y += gravity * Time.deltaTime;
		controller.Move(velocity * Time.deltaTime);
    }


    private bool isGrounded()
    {
		return Physics.CheckSphere(ground.position, distanceToGround, groundMask);
    }

    private void PlayerMovement()
    {
        
		move = controls.Player.Movement.ReadValue<Vector2>();
		
		Vector3 movement = (move.y * transform.forward) + (move.x * transform.right);
		controller.Move(movement * moveSpeed * Time.deltaTime);
        
       
    }

    private void Jump()
    {
		if (controls.Player.Jump.triggered && isGrounded()){
			velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);
		}
    }

    void OnEnable()
    {
		controls.Enable();
    }

    void OnDisable()
    {
		controls.Disable();
    }
}
